install.packages("gcookbook")
library(gcookbook)
install.packages("ggplot2", dependencies=TRUE)
library("ggplot2")
??ggplot2
getwd()
savehistory()
getwd()
savehistory(file = ".Rhistory")
getwd()
setwd("/home/avuche/R")
list.files()
anime_data = read.csv(file.choose(), sep = ",", header = TRUE)
anime_data
anime_data
anime_data
typeof(anime_data)
class(anime_data)
str(anime_data)
summary(anime_data)
anime_data$Score
class(anime_data$Score)
typeof(anime_data$Score)
typeof(anime_data$MAL_ID)
view(anime_data$MAL_ID, anime_data$Score)
?view
??view
View(anime_data$MAL_ID, anime_data$Score)
View(anime_data)
length(anime_data)
dim(anime_data)
history()
savehistory(file = ".Rhistory")
anime_data[1]
anime_data[,1]
anime_data[1,]
VIew(anime_data[1,])
View(anime_data[1,])
max(anime_data)
max(anime_data$Score)
typeof(anime_data$Score)
as.numeric(anime_data$Score)
max(as.numeric(anime_data$Score))
max(as.numeric(anime_data$Score), na.rm = TRUE)
min(as.numeric(anime_data$Score), na.rm = TRUE)
which.max(as.numeric(anime_data$Score))
anime_data[1][2]
anime_data[1,2]
anime_data[1,]
anime_data[3972,]
which.max(as.numeric(anime_data$Score))
anime_data[ which.max(as.numeric(anime_data$Score)) , 1:3 ]
anime_data[ which.min(as.numeric(anime_data$Score)) , 1:3 ]
score = as.numeric(anime_data$Score)
score
length(score)
median(score)
mean(score)
mean(score, na.rm = TRUE)
median(score, na.rm = TRUE)
which(median(score, na.rm = TRUE))
which(score = median(score, na.rm = TRUE))
sum(score)
sum(score, na.rm = TRUE)
sd(score, na.rm = TRUE)
var(score, na.rm = TRUE)
cumsum(score)
cumsum(score[1:20])
cummax(score[1:20])
cummax(score[2:20])
cumsum(score[1:20])
cummax(score[20:40])
cumprod(score[1:20])
as.numeric(cumprod(score[1:20]))
as.integer(cumprod(score[1:20]))
cummin(score[20:40])
rev(score)
sort(score)
rank(score
)
rank(score)
rank(score[1:20])
order(score[1:20])
score[1:20]
sort(score[1:20])
rank(score[1:20])
order(score[1:20])
rank(score[1:20])
rank(score[1:20], ties.method = 'first')
rank(score[1:20], ties.method = 'average')
rank(score[1:20], ties.method = 'max')
anime_data$Score > 9
anim = anime_data
class(anim$Score)
class(anim$Score) = "Numeric"
class(anim$Score)
anim$Score
anime_data$Score
sort(anim$Score)
max(anim$Score)
max(anim$Score, na.rm = TRUE)
anim = anime_data
class(anim$Score)
anim$Score = as.numeric(anim$Score)
class(anim$Score)
class(anime_data$Score)
anime_data$Score = as.numeric(anime_data$Score)
class(anime_data$Score)
anime_data$Score > 9
anime_data$Score > 9.5
score > 9
data2
library(gcookbook)
data2
gcookbook:data2
library(gcookbook)
gccokbook:data2
my.list
score[score>9]
score[score>9, na.rm =TRUE]
sort(anime_data[1:20,1:3])
sort(anime_data$Score)
sort(anime_data)
sort(anime_data[1:20])
anime_data[order(Score),]
anime_data[order(score),]
anime_data[order(-score),]
anime_data[order(-anime_data$Score),]
anime_data[order(-anime_data$Score),c(1,3)]
anime_data[order(-anime_data$Score),c(1,4)]
anime_data[order(-anime_data$Score),c(1:4)]
anime_data[order(-anime_data$Score),c(1:3)]
anime_data[order(-anime_data$Popularity),c(1:3)]
anime_data$Popularity
sort(anime_data$Completed)
anime_data[order(-anime_data$Completed),c(1:3)]
summary(anime_data)
anime_data$Score.1 = as.numeric(anime_data$Score.1)
anime_data$Score.2 = as.numeric(anime_data$Score.2)
anime_data$Score.3 = as.numeric(anime_data$Score.3)
anime_data$Score.4 = as.numeric(anime_data$Score.4)
anime_data$Score.5 = as.numeric(anime_data$Score.5)
anime_data$Score.6 = as.numeric(anime_data$Score.6)
anime_data$Score.7 = as.numeric(anime_data$Score.7)
anime_data$Score.8 = as.numeric(anime_data$Score.8)
anime_data$Score.9 = as.numeric(anime_data$Score.9)
anime_data$Score.10 = as.numeric(anime_data$Score.10)
summary(anime_data)
summary(anime_data)
boxplot(anime_data$Score)
rand()
rnorm()
rnorm(100)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
sample(1:nrow(anime_data), 5)
anime_data[sample(1:nrow(anime_data), 5), ]
sample(1:nrow(anime_data), 5)
anime_data[sample(1:nrow(anime_data), 5), 1:3]
anime_data[sample(1:nrow(anime_data), 15), 1:3]
anime_data[sample(1:nrow(anime_data), 15), 1:3]
sample(1:nrow(anime_data$Score), 100)
nrow(anime_data$Score)
anime_data$Score
dim(anime_data$Score)
length(anime_data$Score)
sample(1:length(anime_data$Score), 100)
sample( anime_data$Score[sample(1:length(anime_data$Score), 100),] )
boxplot( anime_data$Score[sample(1:length(anime_data$Score), 100),] )
anime_data$Score[sample(1:length(anime_data$Score), 100),]
anime_data$Score[sample(1:length(anime_data$Score), 100)]
boxplot( anime_data$Score[sample(1:length(anime_data$Score), 100)] )
boxplot( anime_data$Score[sample(1:length(anime_data$Score), 1000)] )
length(score)
boxplot( anime_data$Score[sample(1:length(anime_data$Score), 5000)] )
sub_data =  anime_data$Score[sample(1:length(anime_data$Score), 5000)]
length(sub_data)
quartile(sub_data)
quantile(sub_data)
quantile(sub_data, na.rm = TRUE)
boxplot(sub_data)
anime_data[seq(1,1000,25),'Completed']
head(anime_data[,1:3])
tail(anime_data[,1:3])
names(anime_data)
row.names(anime_data)
anim = t(anime_data)
anim
new_anime_data = as.data.frame(anime_data$MAL_ID, anime_data$Name, anime_data$Score)
new_anime_data[,1:10]
new_anime_data = as.data.frame(anime_data[1:3,])
new_anime_data
new_anime_data = as.data.frame(anime_data[.1:3])
new_anime_data[,1:10]
new_anime_data = as.data.frame(anime_data[,1:3])
new_anime_data[,1:10]
new_anime_data[1:10,]
new_anime_data = as.data.frame(anime_data[,1:3])
new_anime_data[,1:10]
new_anime_data = as.data.frame(anime_data[,1:3])
new_anime_data[1:10,]
as.matrix(anime_data)
as.matrix(anime_data[1:100])
as.matrix(anime_data[1:100,])
as.matrix(anime_data[1:100,1:3])
as.matrix(anime_data[1:50,1:3])
as.matrix(anime_data[1:20,1:3])
as.matrix(anime_data[1:25,1:3])
as.matrix(anime_data[1:30,1:3])
anime_data[,'Score.1']
anime_data[,'Score.1':'Score.10']
anime_data[,5]
anime_data[1,5]
anime_data[1,10]
anime_data[1,1]
anime_data[1,]
names(anime_data)
anime_data[,26]
anime_data[,25]
anime_data[,24]
colnames(anime_data)
colnames(anime_data) == "Score"
which(colnames(anime_data) == "Score")
which(colnames(anime_data) == "Score.10")
which(colnames(anime_data) == "Score.1")
colnames(anime_data[1,25:36])
colnames(anime_data[25:36])
which(colnames(anime_data) == "Score.10")
colnames(anime_data[26:35])
colnames(anime_data[26:35])
as.data.frame(anime_data[26:35])
score = as.data.frame(anime_data[26:35])
head(score)
colMeans(score)
rowMeans(score)
rowSums(score)
class(score)
typeof(score)
rowsum(score)
rowSums(score)
rowMeans(score)
rowSums(score)
score
rowSums(score)
no_of_score = rowSums(score)
length(no_of_score)
install.packages("dplyr")
library(dplyr)
no_of_score = rowSums(score)
length(no_of_score)
anim = anime_data
mutate(anim, Num.Score = no_of_score)
names(anim)
dim(anim)
anim %>% mutate(Num.Score = no_of_score)
dim(anim)
anim
anim = mutate(anim, Num.Score = no_of_score)
dim(anim)
anim = anime_data
dim(anim)
colnames(anim)
anim = mutate(anim, Num.Score = no_of_score)
dim(anim)
colnames(anim)
anim[1:10,'Num.Score']
select(anim, -Num.Score)
head(select(anim, -Num.Score))
head(select(anim[,1:3], -Num.Score))
head(select(anim, -Num.Score))
head(select(anim, -Num.Score))
head(select(anim,-Genders, -Producers, -Aired, -Rating, -Japanese.name, -Num.Score))
head(select(anim,-Genders, -Producers, -Aired, -Rating, -Japanese.name, -Num.Score))
rename(anim, Genres = Genders)
colnames(anim)
colnames(anime_data)
rename(anim, Genres = Genders)
anim = rename(anim, Genres = Genders)
colnames(anim)
colnames(anime_data)
anime_data = rename(anime_data, Genres = Genders)
colnames(anime_data)
savehistory("~/R/history.Rhistory")
colnames(anim)
anim = select(anim,-Genders, -Producers, -Aired, -Rating, -Japanese.name, -Num.Score)
colnames(anim)
anim = select(anim,-Genres, -Producers, -Aired, -Rating, -Japanese.name, -Num.Score)
colnames(anim)
select(anime_data, MAL_ID)
select(anime_data, MAL_ID, Score, Name)
anime_data[c(1,3,2,5)]
anime_data[c(1,3,2,6)]
filter(anime_data, Score > 9.10)
filter(anime_data, Score > 9.0)
filter(anime_data, Score > 9.0)
filter(anime_data[1:10], Score > 9.0)
filter(anime_data[,c(1,2,3)], Score > 9.0)
filter(anime_data[,1:3], Score > 9.0)
filter(anime_data, Score > 9.0) %>% select(MAL_ID, Name, Score)
anime_data[Score > 9]
anime_data[anime_data$Score > 9]
anime_data[anime_data$Score > 9,]
summary(anime_data)
savehistory("~/R/history.Rhistory")

nd3
nd3 <- nd2 %>%
group_by(Type) %>%
mutate(Stddev = as.numeric(Score) - mean(as.numeric(Score)))
nd3
nd3$Stddev
ggplot(nd3$Stddev, aes(x = Type, y = Score)) +
geom_boxplot()
library(ggplot2)
ggplot(nd3$Stddev, aes(x = Type, y = Score)) +
geom_boxplot()
ggplot(nd3$Stddev, aes(x = Type, y =as,numeric(Score)) +
geom_boxplot()
)
ggplot(nd3$Stddev, aes(x = Type, y =as.numeric(Score)) +
geom_boxplot()
ggplot(nd3$Stddev, aes(x = Type, y =as.numeric(Score))) +
geom_boxplot()
ggplot(nd3, aes(x = Type, y =as.numeric(Score))) +
geom_boxplot()
ggplot(nd3, aes(x = Type, y =as.numeric(Stddev))) +
geom_boxplot()
ggplot(nd3, aes(x = Type, y =as.numeric(Score))) +
geom_boxplot()
nd4 <- anime_data[c(1,2,3,4,34), ]
nd4 %>%
group_by(Type, Source) %>%
summarise(
MeanSc = mean(Score),
)
nd4 %>%
group_by(Type, Source) %>%
summarise(
MeanSc = mean(as.numeric(Score)),
)
nd4
savehistory("~/5.Rhistory")
knitr::opts_chunk$set(echo = TRUE,include = FALSE)
getwd()
anime_data = read.csv("anime.csv", sep = ",", header = TRUE)
knitr::opts_chunk$set(echo = TRUE,message  = FALSE)
anime_data = read.csv("anime.csv", sep = ",", header = TRUE)
library(ggplot2)
anime_data = read.csv("anime.csv", sep = ",", header = TRUE)
library(ggplot2)
library(dplyr)
install.packages('tinytex')
install.packages("tinytex")
library(tinytex)
tinytex::install_tinytex()
order_new <- factor(anime_data$Type ,c("OVA","Movie","Music","Unknown","Special","TV")
)
```{r}
nd7 <- anime_data[c(1,2,3,4,44), 'MAL_ID','Score']
nd7 <- anime_data[c(1,2,3,4,44), c('MAL_ID','Score')]
nd7
nd7 <- anime_data[c(1:10), c('MAL_ID','Score')]
nd7
nd7 <- anime_data[c(1:30), c('MAL_ID','Score','Type')]
nd7
nd1 <- anime_data[c(1:30), c('MAL_ID','Type')]
nd1_type <- factor(c(nd1$Type))
factor(nd1_type, levels = c("OVA","Movie","Music","Unknown","Special","TV"))
nd1 <- anime_data[c(1:30), c('MAL_ID','Type')]
nd1_type <- factor(c(nd1$Type))
x <- factor(nd1_type, levels = c("OVA","Movie","Music","Unknown","Special","TV"))
x
nd1 <- anime_data[c(1:30), c('MAL_ID','Type')]
nd1_type <- factor(c(nd1$Type))
x <- factor(nd1_type, levels = c("OVA","Movie","Music","Unknown","Special","TV"))
nd1 <- anime_data[c(1:30), c('MAL_ID','Type')]
nd1_type <- factor(c(nd1$Type))
x <- factor(nd1_type, levels = c("OVA","Movie","Music","Unknown","Special","TV"))
x
nd1 <- anime_data[c(1:30), c('MAL_ID','Type')]
nd1_type <- factor(c(nd1$Type))
nd1_type
x <- factor(nd1_type, levels = c("OVA","Movie","Music","Unknown","Special","TV"))
x
nd1 <- anime_data[c(1:30), c('MAL_ID','Type')]
nd1_type <- factor(c(nd1$Type))
nd1_type
x <- factor(nd1_type, levels = c("OVA","Movie","TV"))
x
nd1 <- anime_data[c(1:30), c('MAL_ID','Type')]
nd1_type <- factor(c(nd1$Type))
nd1_type
nd1_mod <- factor(nd1_type, levels = c("OVA","Movie","TV"))
nd1_mod
rname_factor <- factor(anime_data[1:10,"Type"])
rname_factor
fct_recode(rname_factor, O="OVA",M="Movie",MU="Music",UN="Unknown",S="Special",T="TV")
rname_factor <- factor(anime_data[1:10,"Type"])
rname_factor
fct_recode(rname_factor, O="OVA",M="Movie",MU="Music",UN="Unknown",S="Special",T="TV")
forcats::fct_recode()
install.packages("tidyverse")
rname_factor <- factor(anime_data[1:10,"Type"])
rname_factor
fct_recode(rname_factor, O="OVA",M="Movie",MU="Music",UN="Unknown",S="Special",T="TV")
library(forcats)
rname_factor <- factor(anime_data[1:10,"Type"])
rname_factor
fct_recode(rname_factor, O="OVA",M="Movie",MU="Music",UN="Unknown",S="Special",T="TV")
nd1 <- anime_data[c(1:30), c('MAL_ID','Type','Score')]
nd1$Type <- reorder(nd1$Type, as.numeric(nd1$Score), FUN = mean)
nd1$Type
nd1 <- anime_data[c(1:30), c('MAL_ID','Type','Score')]
nd1
fct_recode(nd1$Type, O="OVA",M="Movie",T="TV")
nd1 <- anime_data[c(1:30), c('MAL_ID','Type','Score')]
nd1
fct_recode(nd1$Type, O="OVA",M="Movie",T="TV")
do.call(
fct_recode,
c(list(anime_data[c(1:30), c(,'Type',)]), setNames(c("OVA","Movie","TV"), c("O","M","T"))))
nd1 <- anime_data[c(1:30), c('MAL_ID','Type','Score')]
nd1
fct_recode(nd1$Type, O="OVA",M="Movie",T="TV")
do.call(
fct_recode,
c(list(anime_data[c(1:30), c(,'Type',)]), setNames(c("OVA","Movie","TV"), c("O","M","T"))))
nd1 <- anime_data[c(1:30), c('MAL_ID','Type','Score')]
nd1
fct_recode(nd1$Type, O="OVA",M="Movie",T="TV")
do.call(
fct_recode,
c(list(anime_data[c(1:30), c(,'Type',)]), setNames(c("OVA","Movie","TV"), c("O","M","T")))
)
nd1 <- anime_data[c(1:30), c('MAL_ID','Type','Score')]
nd1
fct_recode(nd1$Type, O="OVA",M="Movie",T="TV")
do.call(
fct_recode,
c(list(anime_data[c(1:30), c(,'Type',)])), setNames(c("OVA","Movie","TV"), c("O","M","T")))
nd1 <- anime_data[c(1:30), c('MAL_ID','Type','Score')]
nd1
fct_recode(nd1$Type, O="OVA",M="Movie",T="TV")
do.call(
fct_recode,
c(list(anime_data[c(1:30), c('Type',)])), setNames(c("OVA","Movie","TV"), c("O","M","T")))
nd1 <- anime_data[c(1:30), c('MAL_ID','Type','Score')]
nd1
fct_recode(nd1$Type, O="OVA",M="Movie",T="TV")
do.call(
fct_recode,
c(list(anime_data[c(1:30), c('Type')]), setNames(c("OVA","Movie","TV"), c("O","M","T")))
)
unused_lvl=factor(anime_data[1:10,"Type"])
unused_lvl
new_unused_lvl <- unused_lvl[3:9]
new_unused_lvl
droplevels(new_unused_lvl)
unused_lvl=factor(anime_data[1:10,c("MAL_ID","Type"])
unused_lvl=factor(anime_data[1:10,c("MAL_ID","Type"]))
unused_lvl=factor(anime_data[1:10,c("MAL_ID","Type")])
unused_lvl
new_unused_lvl <- unused_lvl[3:9]
new_unused_lvl
droplevels(new_unused_lvl)
unused_lvl=factor(anime_data[1:10,"Type"])
unused_lvl
new_unused_lvl <- unused_lvl[3:9]
new_unused_lvl
droplevels(new_unused_lvl)
unused_lvl=factor(anime_data[1:10,"Type"])
unused_lvl
new_unused_lvl <- unused_lvl[3:9]
new_unused_lvl
droplevels(new_unused_lvl)
knitr::opts_chunk$set(echo = TRUE,message  = FALSE)
anime_data = read.csv("anime.csv", sep = ",", header = TRUE)
library(ggplot2)
library(dplyr)
library(forcats)
nd1 <- anime_data[c(1:30), c('MAL_ID','Type')]
nd1_type <- factor(c(nd1$Type))
nd1_type
nd1_mod <- factor(nd1_type, levels = c("OVA","Movie","TV"))
nd1_mod
nd1 <- anime_data[c(1:30), c('MAL_ID','Type','Score')]
nd1$Type <- reorder(nd1$Type, as.numeric(nd1$Score), FUN = mean)
nd1$Type
nd1 <- anime_data[c(1:30), c('MAL_ID','Type','Source','Score')]
recode(nd1$Type, TV = "1", Movie = "2", OVA = "2")
nd1 <- anime_data[c(1:30), c('MAL_ID','Type')]
recode(nd$Type, TV = "1", Movie = "2", OVA = "2")
nd1 <- anime_data[c(1:30), c('MAL_ID','Type')]
nd1_type <- recode(nd$Type, TV = "1", Movie = "2", OVA = "2")
nd1_type
nd1 <- anime_data[c(1:30), c('MAL_ID','Type')]
recode(nd$Type, TV = "1", Movie = "2", OVA = "2")
nd1 <- anime_data[c(1:30), c('MAL_ID','Type')]
recode(nd$Type, TV = "1", Movie = "2", OVA = "2")
nd1 <- anime_data[c(1:30), c('MAL_ID','Type')]
recode(nd1$Type, TV = "1", Movie = "2", OVA = "2")
nd1 <- anime_data[c(1:30), c('MAL_ID','Type')]
nd1
recode(nd1$Type, TV = "1", Movie = "2", OVA = "2")
nd1 <- anime_data[c(1:30), c('MAL_ID','Type')]
nd1
recode(nd1$Type, TV = "1", Movie = "2", OVA = "2")
oldvals <- c("TV","Movie","OVA")
newvals <- factor(c("1", "2", "2"))
newvals[ match(nd1$Type, oldvals) ]
nd1 <- anime_data[c(1:30), c('MAL_ID','Type')]
nd1
recode(nd1$Type, TV = "1", Movie = "2", OVA = "2")
oldvals <- c("TV","Movie","OVA")
newvals <- factor(c("1", "2", "2"))
newvals[ match(nd1$Type, oldvals) ]
fct_recode(nd1$Type, 1 = "TV", 2 = "Movie", 2 = "OVA")
nd1 <- anime_data[c(1:30), c('MAL_ID','Type')]
nd1
recode(nd1$Type, TV = "1", Movie = "2", OVA = "2")
oldvals <- c("TV","Movie","OVA")
newvals <- factor(c("1", "2", "2"))
newvals[ match(nd1$Type, oldvals) ]
fct_recode(nd$Type, "1" = "TV", "2" = "Movie", "2" = "OVA")
nd1 <- anime_data[c(1:30), c('MAL_ID','Type','Score')]
nd1$Type <- reorder(nd1$Type, as.numeric(nd1$Score), FUN = mean)
nd1$Type
nd1 <- anime_data[c(1,2,3,4,33), c('Score') ]
nd1$class <- cut(as.numeric(anime_data$Score), breaks = c(0, 7,8,9))
nd1
nd1 <- anime_data[c(1:20), c('Score') ]
nd1$class <- cut(as.numeric(anime_data$Score), breaks = c(0, 7,8,9))
nd1
nd1 <- anime_data[c(1:20), c('Score') ]
nd1$class <- cut(as.numeric(nd1$Score), breaks = c(0, 7,8,9))
nd1 <- anime_data[c(1:20), c('Score') ]
nd1$class <- cut(as.numeric(nd1$Score), breaks = c(0, 7,8,9,Inf))
nd1 <- anime_data[c(1:20), c('Score') ]
nd1$class <- cut(as.numeric(nd1), breaks = c(0, 7,8,9,Inf))
nd1
nd1 <- anime_data[c(1:20), c('MAL_ID','Score') ]
nd1$class <- cut(as.numeric(nd1$Score), breaks = c(0, 7,8,9,Inf))
nd1
nd1 <- anime_data[c(1:20), c('MAL_ID','Score') ]
nd1$class <- cut(as.numeric(nd1$Score), breaks = c(0, 7,8,9,Inf))
nd1$class <- cut(as.numeric(nd1$Score), breaks = c(0, 7,8,9,Inf) , right= FALSE)
nd1
nd1 <- anime_data[c(1:20), c('MAL_ID','Score') ]
nd1$class <- cut(as.numeric(nd1$Score), breaks = c(0, 7,8,9,Inf))
nd1
nd1$class <- cut(as.numeric(nd1$Score), breaks = c(0, 7,8,9,Inf) , right= FALSE)
nd1
nd1 <- anime_data[c(1,2,3,4,5,6,7), c('MAL_ID','Score.10  ')]
nd1 <- anime_data[c(1,2,3,4,5,6,7), c('MAL_ID','Score.10')]
nd1 %>%
mutate(newScore = as.numeric(Score.10)*100)
nd1 <- anime_data[c(1,2,3,4,5,6,7), c('MAL_ID','Score.10')]
nd1 %>%
mutate(newScore = as.numeric(Score.10)/100)
nd1 <- anime_data[c(1,2,3,4,5,6,7), c('MAL_ID','Score.10')]
nd1 %>%
mutate(Modified_Score = as.numeric(Score.10)/100)
nd1 <- anime_data[c(1,2,3,4,5,6,7), c('MAL_ID','Score.10')]
nd1 %>%
mutate(Modified_Score = as.numeric(Score.10)/100)
nd1$Modified_Score
nd1 <- anime_data[c(1,2,3,4,5,6,7), c('MAL_ID','Score.10')]
nd1 %>%
mutate(Modified_Score = as.numeric(Score.10)/100)
nd1 <- anime_data[c(1,2,3,4,5,6,7), c('MAL_ID','Score.10','Score')]
nd1 %>%
mutate(Modified_Score = as.numeric(Score.10)/100)
nd1 %>%
mutate(Modified_Score = as.numeric(Score.10)/100,
Second_Modified_Score= as.numeric(Score)*10)
nd1 <- anime_data[c(1,2,3,4,5,6,7), c('MAL_ID','Score.10','Score')]
nd1 %>%
mutate(Modified_Score = as.numeric(Score.10)/100)
nd1 %>%
mutate(Modified_Score = as.numeric(Score.10)/100,
Second_Modified_Score= as.numeric(Score)*10)
nd1 <- anime_data[c(1,2,3,4,5,6,7), c('MAL_ID','Type','Score')]
nd2 <- nd1 %>%
group_by(Type) %>%
mutate(Stddev = as.numeric(Score) - mean(as.numeric(Score)))
nd2
nd1 <- anime_data[c(1:20), c('MAL_ID','Type','Score')]
nd2 <- nd1 %>%
group_by(Type) %>%
mutate(Stddev = as.numeric(Score) - mean(as.numeric(Score)))
nd2
nd1 <- anime_data[ c('MAL_ID','Type','Score')]
nd2 <- nd1 %>%
group_by(Type) %>%
mutate(Stddev = as.numeric(Score) - mean(as.numeric(Score)))
nd2
nd1 <- anime_data[ c('Type','Score')]
nd2 <- nd1 %>%
group_by(Type) %>%
mutate(Stddev = as.numeric(Score) - mean(as.numeric(Score)))
nd2
nd1 <- anime_data[c(1,2,3,4,5,6,7), c('MAL_ID','Type','Score')]
nd2 <- nd1 %>%
group_by(Type) %>%
mutate(Stddev = as.numeric(Score) - mean(as.numeric(Score)))
nd2
nd1 <- anime_data[c(1,2,3,4,5,6,7), c('MAL_ID','Type','Score')]
nd2 <- anime_data %>%
group_by(Type) %>%
mutate(Stddev = as.numeric(Score) - mean(as.numeric(Score)))
nd2
nd1 <- anime_data[c(1,2,3,4,5,6,7), c('MAL_ID','Type','Score')]
nd2 <- anime_data[c('Type','Score')] %>%
group_by(Type) %>%
mutate(Stddev = as.numeric(Score) - mean(as.numeric(Score)))
nd2
nd1 <- anime_data[c(1,2,3,4,5,6,7), c('MAL_ID','Type','Score')]
nd2 <- nd1 %>%
group_by(Type) %>%
mutate(Stddev = as.numeric(Score) - mean(as.numeric(Score)))
nd2
nd1 <- anime_data[c(1,2,3,4,5,6,7), c('Type','Score')]
nd2 <- nd1 %>%
group_by(Type) %>%
mutate(Stddev = as.numeric(Score) - mean(as.numeric(Score)))
nd2
nd1 <- anime_data[c(1,2,3,4,5,6,7), c('Type','Score')]
nd2 <- nd1 %>%
group_by(Type) %>%
mutate(Stddev = as.numeric(Score) - mean(as.numeric(Score)))
nd2
ggplot(nd2, aes(x = Type, y =as.numeric(Stddev))) +
geom_boxplot()
ggplot(nd2, aes(x = Type, y =as.numeric(Score))) +
geom_boxplot()
nd1 <- anime_data[c(1,2,3,4,34), c('Type','Source','Score') ]
nd1 %>%
group_by(Type, Source) %>%
summarise(
MeanSc = mean(as.numeric(Score)),
)
nd1
nd1 <- anime_data[c(1:20), c('Type','Source','Score') ]
nd2 <- nd1 %>%
group_by(Type, Source) %>%
summarise(
Weight = mean(as.numeric(Score)),
sd = sd(as.numeric(Score)),
n = n(),
se = sd / sqrt(n)
)
nd2
nd1 <- anime_data[c(1:30), c('Type','Source','Score') ]
nd2 <- nd1 %>%
group_by(Type, Source) %>%
summarise(
Weight = mean(as.numeric(Score)),
sd = sd(as.numeric(Score)),
n = n(),
se = sd / sqrt(n)
)
nd2
nd1 <- anime_data[c(1:30), c('Type','Source','Score') ]
nd2 <- nd1 %>%
group_by(Type) %>%
summarise(
Weight = mean(as.numeric(Score)),
sd = sd(as.numeric(Score)),
n = n(),
se = sd / sqrt(n)
)
nd2
nd1 <- anime_data[c(1:30), c('Type','Source','Score') ]
nd2 <- nd1 %>%
group_by(Source) %>%
summarise(
Weight = mean(as.numeric(Score)),
sd = sd(as.numeric(Score)),
n = n(),
se = sd / sqrt(n)
)
nd2
nd1 <-anime_data[c(1:30), c('Aired','Score') ]
ggplot(BOD1, aes(x = Aired, y = as.numeric(Score), group = 1)) +
geom_line()
nd1 <-anime_data[c(1:30), c('Aired','Score') ]
ggplot(nd1, aes(x = Aired, y = as.numeric(Score), group = 1)) +
geom_line()
nd1 <-anime_data[c(1:10), c('Aired','Score') ]
ggplot(nd1, aes(x = Aired, y = as.numeric(Score), group = 1)) +
geom_line()
nd1 <-anime_data[c(1:5), c('Aired','Score') ]
ggplot(nd1, aes(x = Aired, y = as.numeric(Score), group = 1)) +
geom_line()
nd1 <-anime_data[c(1:5), c( substring(anime_data$Aired,8,11) ,'Score') ]
nd1 <-anime_data[c(1:5), c( 'Aired','Score') ]
ggplot(nd1, aes(x = substring(Aired,8,11), y = as.numeric(Score), group = 1)) +
geom_line()
nd1 <-anime_data[c(1:30), c( 'Aired','Score') ]
ggplot(nd1, aes(x = substring(Aired,8,11), y = as.numeric(Score), group = 1)) +
geom_line()
nd1 <-anime_data[c(1:5), c( 'Aired','Score') ]
ggplot(nd1, aes(x = substring(Aired,8,11), y = as.numeric(Score), group = 1)) +
geom_line()
nd1 <-anime_data[c(1:5), c( 'Aired','Score') ]
ggplot(nd1, aes(x = substring(Aired,8,11), y = as.numeric(Score), group = 1)) +
geom_line()
ggplot(nd1, aes(x = substring(Aired,8,11), y = as.numeric(Score))) +
geom_line() +
expand_limits(y = 0)
knitr::opts_chunk$set(echo = TRUE,message  = FALSE)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_histogram(binwidth = 2, fill = "white", colour = "black")
library(ggplot2)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_histogram(binwidth = 2, fill = "white", colour = "black")
library(ggplot2)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_histogram()
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_histogram(binwidth = 2, fill = "white", colour = "black")
ggplot(anime_data, aes(x = as.numeric(Episodes))) +
geom_histogram(binwidth= 2, fill = "white", colour = "black") +
facet_grid(Type ~ .)
ggplot(anime_data, aes(x = as.numeric(Episodes))) +
geom_histogram(binwidth= 10, fill = "white", colour = "black") +
facet_grid(Type ~ .)
ggplot(anime_data, aes(x = as.numeric(Score.10))) +
geom_histogram(binwidth= 10000, fill = "white", colour = "black") +
facet_grid(Type ~ .)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_histogram(binwidth= 2, fill = "white", colour = "black") +
facet_grid(Type ~ .)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_histogram(binwidth= 2, fill = "white", colour = "black") +
facet_grid(Source ~ .)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_histogram(binwidth= 2, fill = "white", colour = "black") +
facet_grid(Type ~ .)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_histogram(binwidth= 2, fill = "white", colour = "black") +
facet_grid(Type ~ .)
ggplot(anime_data, aes(x = as.numeric(Score), fill = Type)) +
geom_histogram(position = "identity", alpha = 0.4)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_density()
ggplot(anime_data, aes(x = as.numeric(Popularity))) +
geom_density()
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_histogram(binwidth= 2, fill = "white", colour = "black") +
facet_grid(Type ~ .)
ggplot(anime_data, aes(x = as.numeric(Score), fill = Type)) +
geom_histogram(position = "identity", alpha = 0.4)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_density()
ggplot(anime_data, aes(x = as.numeric(Popularity))) +
geom_density()
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_line(stat = "density") +
geom_line(stat = "density", adjust = .25, colour = "red") +
geom_line(stat = "density", adjust = 2, colour = "blue")
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_density()
ggplot(anime_data, aes(x = as.numeric(Popularity))) +
geom_density()
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_line(stat = "density") +
geom_line(stat = "density", adjust = .25, colour = "red") +
geom_line(stat = "density", adjust = 2, colour = "blue")
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_density()
ggplot(anime_data, aes(x = as.numeric(Popularity))) +
geom_density()
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_line(stat = "density") +
geom_line(stat = "density", adjust = .25, colour = "red") +
geom_line(stat = "density", adjust = 2, colour = "blue")
ggplot(anime_data, aes(x = as.numeric(Score), y = ..density..)) +
geom_histogram(fill = "cornsilk", colour = "grey60", size = .2) +
geom_density() +
xlim(2, 12)
ggplot(anime_data, aes(x = as.numeric(Score), fill = Type)) +
geom_density(alpha = .3)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_density() +
facet_grid(Type ~ .)
ggplot(anime_data, aes(x = as.numeric(Score), fill = Type)) +
geom_density(alpha = .3)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_density() +
facet_grid(Type ~ .)
ggplot(anime_data, aes(x = as.numeric(Score), y = ..density..)) +
geom_histogram(binwidth = 2, fill = "cornsilk", colour = "grey60", size = .2) +
geom_density() +
facet_grid(Type ~ .)
ggplot(anime_data, aes(x = Type, y = as.numeric(Score))) +
geom_point()
ggplot(anime_data, aes(x = as.numeric(Score), y = as.numeric(Completed))) +
geom_point()
ggplot(anime_data, aes(x = as.numeric(Score), y = as.numeric(Completed))) +
geom_point()
ggplot(heightweight, aes(x = ageYear, y = heightIn)) +
geom_point(shape = 21)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_histogram(binwidth= 2, fill = "white", colour = "black") +
facet_grid(Type ~ .)
ggplot(anime_data, aes(x = as.numeric(Score), fill = Type)) +
geom_histogram(position = "identity", alpha = 0.4)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_histogram(binwidth= 2, fill = "white", colour = "black") +
facet_grid(Type ~ .)
ggplot(anime_data, aes(x = as.numeric(Score), fill = Type)) +
geom_histogram(position = "identity", alpha = 0.8)
ggplot(anime_data, aes(x = as.numeric(Score), y = as.numeric(Completed))) +
geom_point()
ggplot(heightweight, aes(x = ageYear, y = heightIn)) +
geom_point(shape = 21)



install.packages("ggplot2")
library("ggplot2")
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(aes(color = Species)) +
scale_color_viridis_d() +
theme_minimal()
w <- faithful$waiting
ggplot(NULL,aes(x=w))+geom_histogram()
anime_data = read.csv(file.choose(), sep = ",", header = TRUE)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_histogram(binwidth = 2, fill = "white", colour = "black")
load(ggplot2)
library("ggplot2")
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_histogram(binwidth = 2, fill = "white", colour = "black")
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_histogram(binwidth = binsize, fill = "white", colour = "black")
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_histogram()
ggplot(birthwt, aes(x = as.numeric(Score))) +
geom_histogram(binwidth= 2, fill = "white", colour = "black") +
facet_grid(Type ~ .)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_histogram(binwidth= 2, fill = "white", colour = "black") +facet_grid(Type ~ .)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_histogram(binwidth= 1, fill = "white", colour = "black") +facet_grid(Type ~ .)
ggplot(anime_data, aes(x = as.numeric(Score), fill = Type)) +
geom_histogram(position = "identity", alpha = 0.4)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_density()
ggplot(anime_data, aes(x = as.numeric(Popularity))) +
geom_density()
savehistory("~/1.Rhistory")
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_line(stat = "density") +
geom_line(stat = "density", adjust = .25, colour = "red") +
geom_line(stat = "density", adjust = 2, colour = "blue")
library(ggplot2)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_line(stat = "density") +
geom_line(stat = "density", adjust = .25, colour = "red") +
geom_line(stat = "density", adjust = 2, colour = "blue")
ggplot(anime_data, aes(x = as.numeric(Score), y = ..density..)) +
geom_histogram(fill = "cornsilk", colour = "grey60", size = .2) +
geom_density() +
xlim(2, 12)
ggplot(anime_data, aes(x = Score, fill = Type)) +
geom_density(alpha = .3)
ggplot(anime_data, aes(x = as.numeric(Score), fill = Type)) +
geom_density(alpha = .3)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_density() +
facet_grid(Type ~ .)
ggplot(anime_data, aes(x = as.numeric(Score), y = ..density..)) +
geom_histogram(binwidth = 200, fill = "blue", colour = "grey60", size = .2) +
geom_density() +
facet_grid(Type ~ .)
ggplot(birthwt_mod, aes(x = bwt, y = ..density..)) +
geom_histogram(binwidth = 2, fill = "cornsilk", colour = "grey60", size = .2) +geom_density() +
facet_grid(smoke ~ .)
ggplot(anime_data, aes(x = as.numeric(Score), y = ..density..)) +
geom_histogram(binwidth = 2, fill = "blue", colour = "grey60", size = .2) +
geom_density() +
facet_grid(Type ~ .)
ggplot(anime_data, aes(x = as.numeric(Score), y = ..density..)) +
geom_histogram(binwidth = 2, fill = "cornsilk", colour = "grey60", size = .2) +
geom_density() +
facet_grid(Type ~ .)
ggplot(anime_data, aes(x = as.numeric(Score), y = ..density..)) +
geom_histogram(binwidth = 2, fill = "cornsilk", colour = "grey60", size = .1) +
geom_density() +
facet_grid(Type ~ .)
ggplot(anime_data, aes(x = as.numeric(Popularity))) +
geom_freqpoly(binwidth = binsize)
ggplot(anime_data, aes(x = as.numeric(Popularity))) +
geom_freqpoly(binwidth = 1000)
ggplot(anime_data, aes(x = as.numeric(Episodes))) +
geom_freqpoly(binwidth = 10)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_freqpoly(binwidth = 2)
ggplot(anime_data, aes(x = as.numeric(Score))) +
geom_freqpoly(binwidth = binsize)
ggplot(anime_data, aes(x = factor(Score))) +
geom_freqpoly(binwidth = 2)
summary(anime_data)
savehistory("~/3.Rhistory")
unique(df[c(anime_data$Type)])
unique(df[(anime_data$Type)])
unique(df(anime_data$Type))
unique(anime_data$Type)
order_new <- factor(anime_data$Type ,c("OVA","Movie","Music","Unknown","Special","TV")
)
order_new <- factor(anime_data$Type ,c("OVA","Movie","Music","Unknown","Special","TV"))
order_new
order_new <- factor(anime_data[1:10,"Type"] ,c("OVA","Movie","Music","Unknown","Special","TV"))
order_new
rname_factor <- factor(anime_data[1:10,"Type"] ,c(O="OVA",M="Movie",MU="Music",UN="Unknown",S="Special",T="TV"))
rname_factor
rname_factor <- factor(anime_data[1:10,"Type"])
rname_factor
fct_recode(rname_factor, O="OVA",M="Movie",MU="Music",UN="Unknown",S="Special",T="TV")
library(forcats)
install. packages("tidyverse")
instal.packages("tidyverse")
install.packages("tidyverse")
library(forcats)
fct_recode(rname_factor, O="OVA",M="Movie",MU="Music",UN="Unknown",S="Special",T="TV")
do.call(
fct_recode,
c(list(anime_data[1:10,"Type"]), setNames(c("OVA","Movie","Music","Unknown","Special","TV"), c("O","M","MU","UN","S","T"))))
unused_lvl=factor(anime_data[1:10,"Type"])
unused_lvl
new_unused_lvl <- unused_lvl[3:9]
new_unused_lvl
droplevels(new_unused_lvl)
library(dplyr)
nd <- anime_data[c(1,2,3,4,44), ]
nd
head(nd)
recode(nd$Type, TV = "1", Movie = "2", OVA = "2")
rm(nd)
nd <- anime_data[c(1,2,3,4,34), MAL_ID,Type]
nd <- anime_data[c(1,2,3,4,34), ]
nd
rm(nd)
nd <- anime_data[c(1,2,3,4,33), ]
nd
recode(nd$Type, TV = "1", Movie = "2", OVA = "2")
oldvals <- c("TV","Movie","OVA")
newvals <- factor(c("1", "2", "2"))
newvals[ match(nd$Type, oldvals) ]
fct_recode(nd$Type, 1 = "TV", 2 = "Movie", 2 = "OVA")
fct_recode(nd$Type, "1" = "TV", "2" = "Movie", "2" = "OVA")
nd1 <-anime_data
rm(nd1)
nd1 <- anime_data[c(1,2,3,4,33), ]
nd1$class <- cut(as.numeric(anime_data$Score), breaks = c(0, 7, 9, Inf))
nd1
nd1$class <- cut(as.numeric(anime_data$Score), breaks = c(0, 7, 9))
nd1$class <- cut((as.numeric(anime_data$Score)), breaks = c(0, 7, 9))
nd1$class <- cut((as.numeric(nd1$Score)), breaks = c(0, 7, 9))
nd1
savehistory("~/4.Rhistory")
nd2 <- anime_data[c(1,2,3,4,5,6,7), ]
nd2 %>%
mutate(newScore = as.numeric(Score.10)*100)
nd2$newScore
nd2
n3 <- n2 %>%
group_by(Type) %>%
mutate(Stddev = as.numeric(Score) - mean(Score))
n2
nd3 <- nd2 %>%
group_by(Type) %>%
mutate(Stddev = as.numeric(Score) - mean(Score))
nd3
nd3 <- nd2 %>%
group_by(Type) %>%
mutate(Stddev = as.numeric(Score) - mean(as.numeric(Score)))
nd3
nd3$Stddev
ggplot(nd3$Stddev, aes(x = Type, y = Score)) +
geom_boxplot()
library(ggplot2)
ggplot(nd3$Stddev, aes(x = Type, y = Score)) +
geom_boxplot()
ggplot(nd3$Stddev, aes(x = Type, y =as,numeric(Score)) +
geom_boxplot()
)
ggplot(nd3$Stddev, aes(x = Type, y =as.numeric(Score)) +
geom_boxplot()
ggplot(nd3$Stddev, aes(x = Type, y =as.numeric(Score))) +
geom_boxplot()
ggplot(nd3, aes(x = Type, y =as.numeric(Score))) +
geom_boxplot()
ggplot(nd3, aes(x = Type, y =as.numeric(Stddev))) +
geom_boxplot()
ggplot(nd3, aes(x = Type, y =as.numeric(Score))) +
geom_boxplot()
nd4 <- anime_data[c(1,2,3,4,34), ]
nd4 %>%
group_by(Type, Source) %>%
summarise(
MeanSc = mean(Score),
)
nd4 %>%
group_by(Type, Source) %>%
summarise(
MeanSc = mean(as.numeric(Score)),
)
nd4
savehistory("~/5.Rhistory")
